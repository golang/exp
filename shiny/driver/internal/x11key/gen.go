// Copyright 2019 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// +build ignore

// This program generates the table keysymCodePoints from /usr/include/X11/keysymdef.h
package main

import (
	"bufio"
	"bytes"
	"fmt"
	"go/format"
	"io"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"regexp"
	"strings"
)

func main() {
	fh, err := os.Open("/usr/include/X11/keysymdef.h")
	if err != nil {
		log.Fatalf("opening keysymdef.h: %v", err)
	}

	defer fh.Close()

	seen := make(map[string]struct{})

	xkCodes := make(map[string]string)

	buf := &bytes.Buffer{}

	fmt.Fprintf(buf, `// generated by go generate; DO NOT EDIT.

package x11key

// keysymCodePoints maps xproto.Keysym values to their corresponding unicode code point.
var keysymCodePoints = map[rune]rune{
`)

	re := regexp.MustCompile(`^#define (XK_[^ ]*) *0x([[:xdigit:]]+) .*U\+([[:xdigit:]]+) (.+)(?: |\))\*/$`)
	reAll := regexp.MustCompile(`^#define (XK_[^ ]*) *0x([[:xdigit:]]+)`)

	s := bufio.NewScanner(fh)
	for s.Scan() {
		mAll := reAll.FindStringSubmatch(strings.TrimSpace(s.Text()))
		if mAll != nil {
			xkCodes[mAll[1]] = mAll[2]
		}
		m := re.FindStringSubmatch(strings.TrimSpace(s.Text()))
		if m == nil {
			continue
		}

		if _, isSeen := seen[m[2]]; isSeen {
			log.Printf("Duplicated mapped XK %s", m[2])
			continue
		}
		seen[m[2]] = struct{}{}

		fmt.Fprintf(buf, "0x%s: 0x%s, // %s:\t%s\n", m[2], m[3], m[1], m[4])

	}
	if err := s.Err(); err != nil {
		log.Fatalf("reading keysymdef.h: %v", err)
	}

	tmpKeysymFile := os.TempDir() + "/keysym_to_unicode.cc"
	keysymUrl := "https://raw.githubusercontent.com/microsoft/node-native-keymap/master/deps/chromium/x/keysym_to_unicode.cc"
	err = DownloadFile(tmpKeysymFile, keysymUrl)
	if err != nil {
		log.Fatalf("downloading keysym_to_unicode.cc: %v", err)
	}

	fh2, err := os.Open(tmpKeysymFile)
	if err != nil {
		log.Fatalf("opening keysym_to_unicode.cc: %v", err)
	}

	defer fh2.Close()

	re2 := regexp.MustCompile(`^\{(XK_[^,]*), *0x([[:xdigit:]]+)\}, *\/\/ *(.+)$`)

	s2 := bufio.NewScanner(fh2)
	for s2.Scan() {
		m := re2.FindStringSubmatch(strings.TrimSpace(s2.Text()))
		if m == nil {
			continue
		}

		var xkCode string
		var isXKCode bool
		if xkCode, isXKCode = xkCodes[m[1]]; !isXKCode {
			log.Printf("Unknown XK name %s", m[1])
			continue
		}

		if _, isSeen := seen[xkCode]; isSeen {
			log.Printf("Already mapped XK %s", xkCode)
			continue
		}

		fmt.Fprintf(buf, "0x%s: 0x%s, // %s:\t%s\n", xkCode, m[2], m[1], m[3])

	}

	fmt.Fprintf(buf, "}\n")

	fmted, err := format.Source(buf.Bytes())
	if err != nil {
		log.Fatalf("formatting output: %v", err)
	}

	err = ioutil.WriteFile("table.go", fmted, 0644)
	if err != nil {
		log.Fatalf("writing table.go: %v", err)
	}
}

// DownloadFile will download a url to a local file. It's efficient because it will
// write as it downloads and not load the whole file into memory.
func DownloadFile(filepath string, url string) error {

	// Get the data
	resp, err := http.Get(url)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	// Create the file
	out, err := os.Create(filepath)
	if err != nil {
		return err
	}
	defer out.Close()

	// Write the body to file
	_, err = io.Copy(out, resp.Body)
	return err
}
